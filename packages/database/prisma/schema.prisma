generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ########################################
// ##                                    ##
// ##               OAuth                ##
// ##                                    ##
// ########################################
// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// ########################################
// ##                                    ##
// ##               User                 ##
// ##                                    ##
// ########################################
model User {
  id        String    @id @default(cuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  first_name String
  last_name  String
  email      String @unique
  password   String

  personal_id String @unique
  sex         Sex
  role        Role   @default(STUDENT)

  has_profile               Profile?              @relation("profile_of_user")
  has_mate_preference       Profile?              @relation("mate_pref_of_user")
  has_dorm_preference       DormPreference?
  has_calculated_preference CalculatedPreference? @relation("has_calculated_preference")

  roomId   String?
  lived_in Room?   @relation("lived_in", fields: [roomId], references: [id], onDelete: SetNull)

  // Oauth Profile
  // Account  Account[]
}

// ########################################
// ##                                    ##
// ##        Profile & Mate Pref         ##
// ##                                    ##
// ########################################
model Profile {
  id        String    @id @default(cuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  owner_id       String @unique
  belong_to_user User?  @relation("profile_of_user", fields: [owner_id], references: [id], onDelete: Cascade)
  pref_owner_id  String @unique
  preference_of  User?  @relation("mate_pref_of_user", fields: [pref_owner_id], references: [id], onDelete: Cascade)

  // scale attribute 
  messiness Int
  loudness  Int

  // range attribute
  do_not_disturb DoNotDisturb[]
}

// ########################################
// ##                                    ##
// ##             Calc Pref              ##
// ##                                    ##
// ########################################
model CalculatedPreference {
  id        String    @id @default(cuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  owner_id       String @unique
  belong_to_user User?  @relation("has_calculated_preference", fields: [owner_id], references: [id])

  messiness_tolerant_min Int
  messiness_tolerant_max Int

  loudness_tolerant_min Int
  loudness_tolerant_max Int

  do_not_disturb_tolerant DoNotDisturbTolerant[]
}

model DoNotDisturb {
  id String @id @default(cuid())

  start Int
  stop  Int

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model DoNotDisturbTolerant {
  id String @id @default(cuid())

  start_min Int
  start_max Int

  stop_min Int
  stop_max Int

  preferenceId String
  preference   CalculatedPreference @relation(fields: [preferenceId], references: [id], onDelete: Cascade)
}

// ########################################
// ##                                    ##
// ##             Dorm Pref              ##
// ##                                    ##
// ########################################
model DormPreference {
  id        String    @id @default(cuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  owner_id       String @unique
  belong_to_user User   @relation(fields: [owner_id], references: [id], onDelete: Cascade)

  dorm_type       DormTypePrefer
  residents_limit Int            @db.SmallInt

  room_pref_id          String         @unique
  about_room_preference RoomPreference @relation("belong_to_dorm_preference", fields: [room_pref_id], references: [id])
  // userId                String
}

// ########################################
// ##                                    ##
// ##             Room Pref              ##
// ##                                    ##
// ########################################
model RoomPreference {
  id        String    @id @default(cuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  belong_to_dorm_preference DormPreference? @relation("belong_to_dorm_preference")

  zone         Zone
  floor_number Int
}

// ########################################
// ##                                    ##
// ##                Dorm                ##
// ##                                    ##
// ########################################
model Dorm {
  id        String    @id @default(cuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  name      String
  sex       Sex
  dorm_type DormType

  floors Floor[] @relation("belong_to_dorm")
}

// ########################################
// ##                                    ##
// ##               Floor                ##
// ##                                    ##
// ########################################
model Floor {
  id        String    @id @default(cuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  dormId         String
  belong_to_dorm Dorm   @relation("belong_to_dorm", fields: [dormId], references: [id], onDelete: Cascade)

  floor_number Int

  rooms Room[]
}

// ########################################
// ##                                    ##
// ##                Room                ##
// ##                                    ##
// ########################################
model Room {
  id        String    @id @default(cuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  floorId         String?
  belong_to_floor Floor?  @relation(fields: [floorId], references: [id], onDelete: Cascade)

  room_number Int
  zone        Zone

  residents User[] @relation("lived_in")
}

// ########################################
// ##                                    ##
// ##                Enum                ##
// ##                                    ##
// ########################################
enum DormType {
  BUFFET
  RENOVATED
  MONTHLY
}

enum DormTypePrefer {
  BUFFET
  RENOVATED
  MONTHLY
  IGNORE
}

enum Zone {
  DESERT
  JUNGLE
}

enum Sex {
  MALE
  FEMALE
}

enum Role {
  STUDENT
  ADMIN
}
