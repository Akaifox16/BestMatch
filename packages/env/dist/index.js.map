{"version":3,"sources":["../index.mts","../src/schema.mts","../src/server.mts","../src/client.mts"],"sourcesContent":["export * from './src/server.mjs'\nexport { env as clientEnv } from './src/client.mjs'\n","import { z } from \"zod\";\n\nexport const serverSchema = z.object({\n  DATABASE_URL: z.string().url(),\n  NODE_ENV: z.enum(['development', 'test', 'production']),\n  NEXTAUTH_SECRET:\n    process.env.NODE_ENV === 'production'\n      ? z.string().min(1)\n      : z.string().min(1).optional(),\n  NEXTAUTH_URL: z.preprocess(\n    (str) => process.env.VERCEL_URL ?? str,\n    process.env.VERCEL ? z.string() : z.string().url(),\n  ),\n})\n\n/**\n *  @type {{ [k in keyof z.infer<typeof serverSchema>]: z.infer<typeof serverSchema>[k] | undefined }}\n */\nexport const serverEnv = {\n  DATABASE_URL: process.env.DATABASE_URL,\n  NODE_ENV: process.env.NODE_ENV,\n  NEXTAUTH_SECRET: process.env.NEXTAUTH_SECRET,\n  NEXTAUTH_URL: process.env.NEXTAUTH_URL,\n}\n\nexport const clientSchema = z.object({\n\n})\n\nexport const clientEnv = {\n\n}\n","import { serverEnv, serverSchema } from \"./schema.mjs\";\n\nexport const env = serverSchema.parse(serverEnv)\n","import { clientSchema, clientEnv } from \"./schema.mjs\";\n\nexport const env = clientSchema.parse(clientEnv)"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,mBAAAA;AAAA,EAAA;AAAA;AAAA;;;ACAA,iBAAkB;AAEX,IAAM,eAAe,aAAE,OAAO;AAAA,EACnC,cAAc,aAAE,OAAO,EAAE,IAAI;AAAA,EAC7B,UAAU,aAAE,KAAK,CAAC,eAAe,QAAQ,YAAY,CAAC;AAAA,EACtD,iBACE,QAAQ,IAAI,aAAa,eACrB,aAAE,OAAO,EAAE,IAAI,CAAC,IAChB,aAAE,OAAO,EAAE,IAAI,CAAC,EAAE,SAAS;AAAA,EACjC,cAAc,aAAE;AAAA,IACd,CAAC,QAAK;AAVV;AAUa,2BAAQ,IAAI,eAAZ,YAA0B;AAAA;AAAA,IACnC,QAAQ,IAAI,SAAS,aAAE,OAAO,IAAI,aAAE,OAAO,EAAE,IAAI;AAAA,EACnD;AACF,CAAC;AAKM,IAAM,YAAY;AAAA,EACvB,cAAc,QAAQ,IAAI;AAAA,EAC1B,UAAU,QAAQ,IAAI;AAAA,EACtB,iBAAiB,QAAQ,IAAI;AAAA,EAC7B,cAAc,QAAQ,IAAI;AAC5B;AAEO,IAAM,eAAe,aAAE,OAAO,CAErC,CAAC;AAEM,IAAM,YAAY,CAEzB;;;AC7BO,IAAM,MAAM,aAAa,MAAM,SAAS;;;ACAxC,IAAMC,OAAM,aAAa,MAAM,SAAS;","names":["env","env"]}