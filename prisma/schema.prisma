generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  first_name String
  last_name  String
  email      String @unique
  password   String

  date_of_birth DateTime
  // maybe string?
  personal_id   Int      @unique
  sex           Sex

  profile_id          String?         @unique
  has_profile         Profile?        @relation("belong_to_user", fields: [profile_id], references: [id])
  mate_pref_id        String?         @unique
  has_mate_preference Profile?        @relation("preference_of", fields: [mate_pref_id], references: [id])
  dorm_preference_id  String?         @unique
  has_dorm_preference DormPreference? @relation("dorm_preference_of", fields: [dorm_preference_id], references: [id])

  roomId   String?
  lived_in Room?   @relation("lived_in", fields: [roomId], references: [id])
}

model Profile {
  id        String    @id @default(cuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  belong_to_user User? @relation("belong_to_user")
  preference_of  User? @relation("preference_of")

  loud_player YesNoPrefer
  bed_time_lo DateTime
  bed_time_hi DateTime
  keep_clean  Int
}

model DormPreference {
  id        String    @id @default(cuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  owner User? @relation("dorm_preference_of")

  has_canteen      YesNoPrefer
  has_minimart     YesNoPrefer
  has_laundry      YesNoPrefer
  close_to_transit YesNoPrefer
  dorm_type        DormTypePrefer

  room_pref_id          String         @unique
  about_room_preference RoomPreference @relation("belong_to_dorm_preference", fields: [room_pref_id], references: [id])
  userId                String
}

model RoomPreference {
  id        String    @id @default(cuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  belong_to_dorm_preference DormPreference? @relation("belong_to_dorm_preference")

  zone            Zone
  floor_number    Int
  residents_limit Int

  close_to_computer_room YesNoPrefer
  close_to_shower_room   YesNoPrefer
  close_to_stair         YesNoPrefer
}

model Dorm {
  id        String    @id @default(cuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  name      String
  sex       Sex
  dorm_type DormType

  has_canteen      YesNo
  has_minimart     YesNo
  has_laundry      YesNo
  close_to_transit YesNo

  floors Floor[] @relation("belong_to_dorm")
}

model Floor {
  id        String    @id @default(cuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  dormId         String
  belong_to_dorm Dorm   @relation("belong_to_dorm", fields: [dormId], references: [id])

  floor_number      Int
  has_computer_room YesNo

  rooms Room[]
}

model Room {
  id        String    @id @default(cuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  floorId         String?
  belong_to_floor Floor?  @relation(fields: [floorId], references: [id])

  room_number    Int
  resident_limit Int
  zone           Zone

  close_to_shower_room YesNo
  close_to_stair       YesNo

  residents User[] @relation("lived_in")
}

enum DormType {
  BUFFET
  PREMIUM_BUFFET
  MONTHLY
}

enum DormTypePrefer {
  BUFFET
  PREMIUM_BUFFET
  MONTHLY
  IGNORE
}

enum YesNo {
  YES
  NO
}

enum YesNoPrefer {
  YES
  NO
  IGNORE
}

enum Activity {
  CAFE
  PLAY
  REST
  DRINK
}

enum Zone {
  DESERT
  JUNGLE
}

enum Sex {
  MALE
  FEMALE
}
